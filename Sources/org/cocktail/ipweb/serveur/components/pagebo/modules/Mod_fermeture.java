package org.cocktail.ipweb.serveur.components.pagebo.modules;
// Generated by the WOLips Template engine Plug-in at 14 aoét 2007 08:36:31
import org.cocktail.fwkcktlwebapp.server.components.CktlWebComponent;
import org.cocktail.ipweb.serveur.Session;
import org.cocktail.ipweb.serveur.controlleur.FermetureCtrlr;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSLog;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSNotification;
import com.webobjects.foundation.NSNotificationCenter;
import com.webobjects.foundation.NSSelector;

public class Mod_fermeture extends CktlWebComponent {

	private static final int DIAL_AUCUN = 0, DIAL_MODIF = 1;
	private int dialogueActuel;

	private static final long serialVersionUID = -8673287043075042279L;

	public FermetureCtrlr monCtFermeture;
	public String nomFormWOBrowser = "formWOB";

	private NSArray listeChoixUEouvertes, listeChoixUEfermees;
	public EOGenericRecord eoUEouverte;
    public EOGenericRecord eoDiplSelected;
    public Integer fspnKey, anneeSuivie, mueKey;

	public Mod_fermeture(WOContext context) {
		super(context);

		monCtFermeture = new FermetureCtrlr((Session)session());
		
		// s'enregistrer pour les notifs (chgt d'année en cours)
		NSNotificationCenter.defaultCenter().addObserver(this,	// on doit me prévenir moi-même !
				new NSSelector("chgtAnnee",							// via cette méthode
						new Class [] {NSNotification.class}),				// argument obligatoire !!!
						"chgtAnneeEnCours",									// la signature de la notif qui me plait
						(Session)this.session());					// instance de celui qui la poste !
	}

	//  -----------------------------------------------------    
	//  ------------- Reponse aux notifications -------------
	//  -----------------------------------------------------    

	/// Un changement d'année vient d'avoir lieu...
	public void chgtAnnee(NSNotification laNotif) {
		eoDiplSelected = null;
	}


	//  --------------------------------------------------------    
	//  ---------------- Expr. conditionnelles -----------------
	//  --------------------------------------------------------    

	// Est-ce qu'on a choisi une UE ?
	public boolean isDiplChoisi() {
		return (fspnKey != null);
	}


	// Indiquer si un dialogue de modif est en cours...
	public boolean dialogueModifEnCours() {
		if (dialogueActuel == DIAL_AUCUN) return false;
		else return true;
	}

	//    // états pour savoir si on affiche les boutons d'action sur le commentaire ou le couple Valider/Annuler
	//    public boolean phaseValidModif() {
	//    	return phaseValidModif;
	//    }

	//  --------------------------------------------------------    
	//  ---------------- Valeurs à afficher  -------------------
	//  --------------------------------------------------------    

	// Retourne un submit du formulaire de choix d'EC, à la sélection dans le WOBrowser...
	public String fctSubmitChoix() {
		return "document."+nomFormWOBrowser+".submit();";
	}


	//  --------------------------------------------------------    
	//  ---------------- Valeurs en E/S  -----------------------
	//  --------------------------------------------------------    

	public NSArray getSelectionUEouverte()
	{
		return null;
	}

	public void setSelectionUEouverte(NSArray newSelectionUEouverte)
	{
		listeChoixUEouvertes = newSelectionUEouverte;
	}   	

	public NSArray getSelectionUEfermee()
	{
		return null;
	}

	public void setSelectionUEfermee(NSArray newSelectionUEfermee)
	{
		listeChoixUEfermees = newSelectionUEfermee;
	}

	//  --------------------------------------------------------    
	//  ------------------------- ACTIONS ----------------------
	//  --------------------------------------------------------    

	// On veut afficher une sélection d'UE ... 
	public WOComponent selectDipl() {
			NSLog.err.appendln("********************>>>>>>>>>>  On genere l'action selectDipl() !!!!! " + isDiplChoisi());

			// monCtFermeture.listeUEouvertes = listeEc;
			monCtFermeture.initListeUE(fspnKey);
			return null;
	}

	public WOComponent supprUEfermee()
	{
		// Y a t'il des diplomes à virer ?
		if (listeChoixUEouvertes != null && listeChoixUEouvertes.count()>0) {
			monCtFermeture.ajouterRestriction(listeChoixUEouvertes);
		}

		return null;
	}


	public WOComponent ajoutUEfermee()
	{
		// Y a t'il des diplomes à ajouter ?
		if (listeChoixUEfermees != null && listeChoixUEfermees.count()>0) {
			monCtFermeture.enleverRestriction(listeChoixUEfermees);
		}
		return null;
	}

	public WOComponent tempAction()
	{
		return null;
	}

	public boolean debugEnCours()
	{
		return ((Session)session()).monApp.debug();
	}

	/**
	 * @return the displayUE
	 */
	public String displayUE() {
		return eoUEouverte.valueForKey("mueLibelle") + " (" + eoUEouverte.valueForKey("mueCode") + ")";
	}



}